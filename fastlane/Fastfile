# frozen_string_literal: true

default_platform(:ios)

platform :ios do
  desc 'Match App Store Provisioning Profiles'
  lane :release_match do
    xcode_select ENV['XCODE_PATH'] if ENV['XCODE_PATH']
    match type: 'appstore', app_identifier: 'io.ngs.LiveClock', readonly: ENV['MATCH_READONLY'] == 'true'
  end

  desc 'Build app for release'
  lane :release_build do
    xcode_select ENV['XCODE_PATH'] if ENV['XCODE_PATH']
    release_match

    # Get the provisioning profile name from match
    profile_name = ENV['sigh_io.ngs.LiveClock_appstore_profile-name'] || 'match AppStore io.ngs.LiveClock'
    identifier = 'io.ngs.LiveClock'

    update_code_signing_settings(
      profile_name: profile_name,
      bundle_identifier: identifier,
      use_automatic_signing: false,
      code_sign_identity: 'Apple Distribution',
      targets: ['LiveClock'],
      build_configurations: %w[Release],
      path: 'LiveClock.xcodeproj'
    )

    # Build the app and create the archive
    build_app(
      export_method: 'app-store',
      scheme: 'LiveClock',
      destination: 'generic/platform=iOS',
      output_directory: './build/release/ios',
      output_name: 'LiveClock-iOS',
      sdk: 'iphoneos'
    )
  end

  desc 'Publish app to App Store'
  lane :release_upload do
    setup_app_store_connect_api_key

    pilot(
      skip_waiting_for_build_processing: true,
      ipa: './build/release/ios/LiveClock-iOS.ipa'
    )
  end

  desc 'Update App Store metadata'
  lane :deliver_metadata do
    setup_app_store_connect_api_key

    deliver(
      platform: 'ios',
      force: true,
      skip_screenshots: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
      metadata_path: './fastlane/metadata',
      app_identifier: 'io.ngs.LiveClock'
    )
  end

  desc 'Take screenshots using snapshot'
  lane :take_screenshots do
    require_relative 'patches/snapshot_mac_detection_patch'
    require_relative 'patches/device_manager_patch'

    snapshot
  end

  desc 'Update App Store screenshots'
  lane :deliver_screenshots do
    setup_app_store_connect_api_key

    deliver(
      platform: 'ios',
      force: true,
      skip_metadata: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
      overwrite_screenshots: true,
      screenshots_path: './fastlane/screenshots/ios',
      app_identifier: 'io.ngs.LiveClock'
    )
  end
end

platform :mac do
  desc 'Create keychain'
  lane :create_ci_keychain do
    create_keychain(
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
  end

  desc 'Match App Store Provisioning Profiles for macOS'
  lane :release_match do
    xcode_select ENV['XCODE_PATH'] if ENV['XCODE_PATH']
    # Get Application Distribution certificate and provisioning profile
    match(
      type: 'appstore',
      app_identifier: 'io.ngs.LiveClock',
      platform: 'macos',
      readonly: ENV['MATCH_READONLY'] == 'true'
    )
    # Get Mac Installer Distribution certificate for PKG creation
    match(
      type: 'appstore',
      app_identifier: 'io.ngs.LiveClock',
      platform: 'macos',
      additional_cert_types: 'mac_installer_distribution',
      readonly: ENV['MATCH_READONLY'] == 'true'
    )
  end

  desc 'Build app for macOS release'
  lane :release_build do
    xcode_select ENV['XCODE_PATH'] if ENV['XCODE_PATH']
    release_match

    # Get the provisioning profile name from match
    profile_name = ENV['sigh_io.ngs.LiveClock_appstore_macos_profile-name'] || 'match AppStore io.ngs.LiveClock macos'

    update_code_signing_settings(
      profile_name: profile_name,
      bundle_identifier: 'io.ngs.LiveClock',
      use_automatic_signing: false,
      code_sign_identity: 'Apple Distribution',
      targets: ['LiveClock'],
      build_configurations: %w[Release],
      path: 'LiveClock.xcodeproj'
    )
    build_app(
      export_method: 'app-store',
      scheme: 'LiveClock',
      destination: 'generic/platform=macOS',
      output_directory: './build/release/mac',
      output_name: 'LiveClock-macOS',
      sdk: 'macosx'
    )
  end

  desc 'Publish macOS app to App Store'
  lane :release_upload do
    setup_app_store_connect_api_key

    # Upload macOS app to App Store Connect
    upload_to_app_store(
      app_identifier: 'io.ngs.LiveClock',
      platform: 'osx',
      pkg: './build/release/mac/LiveClock-macOS.pkg',
      skip_screenshots: true,
      skip_metadata: true,
      force: true,
      run_precheck_before_submit: false
    )
  end

  desc 'Update App Store metadata'
  lane :deliver_metadata do
    setup_app_store_connect_api_key

    deliver(
      platform: 'osx',
      force: true,
      skip_screenshots: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
      metadata_path: './fastlane/metadata',
      app_identifier: 'io.ngs.LiveClock'
    )
  end

  desc 'Update App Store screenshots'
  lane :deliver_screenshots do
    setup_app_store_connect_api_key

    deliver(
      platform: 'osx',
      force: true,
      skip_metadata: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
      overwrite_screenshots: true,
      screenshots_path: './fastlane/screenshots/mac',
      app_identifier: 'io.ngs.LiveClock'
    )
  end
end

# visionOS uses iOS platform but with different scheme
platform :visionos do
  desc 'Match App Store Provisioning Profiles for visionOS (alias to iOS)'
  lane :release_match do
    # visionOS uses iOS provisioning profiles, so just call the iOS lane
    Fastlane::LaneManager.cruise_lane('ios', 'release_match')
  end

  desc 'Build app for visionOS release'
  lane :release_build do
    xcode_select ENV['XCODE_PATH'] if ENV['XCODE_PATH']
    release_match

    # Get the provisioning profile name from match (visionOS uses iOS profiles)
    profile_name = ENV['sigh_io.ngs.LiveClock_appstore_profile-name'] || 'match AppStore io.ngs.LiveClock'

    update_code_signing_settings(
      profile_name: profile_name,
      bundle_identifier: 'io.ngs.LiveClock',
      use_automatic_signing: false,
      code_sign_identity: 'Apple Distribution',
      targets: ['LiveClock'],
      build_configurations: %w[Release],
      path: 'LiveClock.xcodeproj'
    )

    # Load monkey patches
    require_relative 'patches/gym_module_patch'

    build_app(
      export_method: 'app-store',
      scheme: 'LiveClock',
      destination: 'generic/platform=visionOS',
      output_directory: './build/release/visionos',
      output_name: 'LiveClock-visionOS',
      sdk: 'xros'
    )
  end

  desc 'Publish visionOS app to App Store'
  lane :release_upload do
    setup_app_store_connect_api_key

    pilot(
      skip_waiting_for_build_processing: true,
      ipa: './build/release/visionos/LiveClock-visionOS.ipa'
    )
  end

  desc 'Update App Store metadata'
  lane :deliver_metadata do
    setup_app_store_connect_api_key

    deliver(
      platform: 'xros',
      force: true,
      skip_screenshots: true,
      skip_binary_upload: true,
      run_precheck_before_submit: false,
      metadata_path: './fastlane/metadata',
      app_identifier: 'io.ngs.LiveClock'
    )
  end

  desc 'Update App Store screenshots'
  lane :deliver_screenshots do
    UI.error 'Deliver screenshots for visionOS is not yet supported.'
    # setup_app_store_connect_api_key

    # deliver(
    #   platform: 'xros',
    #   force: true,
    #   skip_metadata: true,
    #   skip_binary_upload: true,
    #   run_precheck_before_submit: false,
    #   overwrite_screenshots: true,
    #   screenshots_path: './fastlane/screenshots/visionos',
    #   app_identifier: 'io.ngs.LiveClock'
    # )
  end
end

desc 'Setup AppStore Connect API Key'
lane :setup_app_store_connect_api_key do
  return unless ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'] && ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'] && ENV['APP_STORE_CONNECT_API_KEY_KEY']

  app_store_connect_api_key(
    key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
    issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
    key_content: ENV['APP_STORE_CONNECT_API_KEY_KEY'],
    is_key_content_base64: ENV['APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64'] == 'true'
  )
end

desc 'Create keychain'
lane :create_ci_keychain do
  create_keychain(
    default_keychain: true,
    unlock: true,
    timeout: 3600
  )
end
